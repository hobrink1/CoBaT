//
//  JSON RKI State.swift
//  CoBaT
//
//  Created by Hartwig Hopfenzitz on 24.11.20.
//


// file generated by website "https://app.quicktype.io" which creates
// full JSON decode data structures and helper methodes out of JSON example data
// very usefull!!

// created file has been adjusted for internal use


// This file was generated from JSON Schema using quicktype, do not modify it directly.
// To parse the JSON, add this file to your project and do:
//
//   let rKIStateJSON = try RKI_State_JSON(json)

import Foundation

// MARK: - RKI_State_JSON
struct RKI_State_JSON: Codable {
    var objectidFieldName: String
    var uniqueidField: RKI_State_UniqueidField
    var globalidFieldName: String
    var geometryProperties: RKI_State_GeometryProperties
    var geometryType: String
    var spatialReference: RKI_State_SpatialReference
    var fields: [RKI_State_Field]
    var features: [RKI_State_Feature]

    enum CodingKeys: String, CodingKey {
        case objectidFieldName = "objectIdFieldName"
        case uniqueidField = "uniqueIdField"
        case globalidFieldName = "globalIdFieldName"
        case geometryProperties = "geometryProperties"
        case geometryType = "geometryType"
        case spatialReference = "spatialReference"
        case fields = "fields"
        case features = "features"
    }
}

// MARK: RKI_State_JSON convenience initializers and mutators

fileprivate extension RKI_State_JSON {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_State_JSON.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        objectidFieldName: String? = nil,
        uniqueidField: RKI_State_UniqueidField? = nil,
        globalidFieldName: String? = nil,
        geometryProperties: RKI_State_GeometryProperties? = nil,
        geometryType: String? = nil,
        spatialReference: RKI_State_SpatialReference? = nil,
        fields: [RKI_State_Field]? = nil,
        features: [RKI_State_Feature]? = nil
    ) -> RKI_State_JSON {
        return RKI_State_JSON(
            objectidFieldName: objectidFieldName ?? self.objectidFieldName,
            uniqueidField: uniqueidField ?? self.uniqueidField,
            globalidFieldName: globalidFieldName ?? self.globalidFieldName,
            geometryProperties: geometryProperties ?? self.geometryProperties,
            geometryType: geometryType ?? self.geometryType,
            spatialReference: spatialReference ?? self.spatialReference,
            fields: fields ?? self.fields,
            features: features ?? self.features
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_State_Feature
struct RKI_State_Feature: Codable {
    var attributes: RKI_State_Attributes

    enum CodingKeys: String, CodingKey {
        case attributes = "attributes"
    }
}

// MARK: RKI_State_Feature convenience initializers and mutators

fileprivate extension RKI_State_Feature {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_State_Feature.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        attributes: RKI_State_Attributes? = nil
    ) -> RKI_State_Feature {
        return RKI_State_Feature(
            attributes: attributes ?? self.attributes
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_State_Attributes
struct RKI_State_Attributes: Codable {
    var objectid1: Int
    var lanEwags: String
    var lanEwgen: String
    var lanEwbez: String
    var lanEwewz: Int
    var objectid: Int
    var fallzahl: Int
    var aktualisierung: Int
    var agsTxt: String
    var globalid: String
    var faelle100000_ew: Double
    var shapeArea: Double
    var shapeLength: Double
    var death: Int
    var cases7BlPer100K: Double

    enum CodingKeys: String, CodingKey {
        case objectid1 = "OBJECTID_1"
        case lanEwags = "LAN_ew_AGS"
        case lanEwgen = "LAN_ew_GEN"
        case lanEwbez = "LAN_ew_BEZ"
        case lanEwewz = "LAN_ew_EWZ"
        case objectid = "OBJECTID"
        case fallzahl = "Fallzahl"
        case aktualisierung = "Aktualisierung"
        case agsTxt = "AGS_TXT"
        case globalid = "GlobalID"
        case faelle100000_ew = "faelle_100000_EW"
        case shapeArea = "Shape__Area"
        case shapeLength = "Shape__Length"
        case death = "Death"
        case cases7BlPer100K = "cases7_bl_per_100k"
    }
}

// MARK: RKI_State_Attributes convenience initializers and mutators

fileprivate extension RKI_State_Attributes {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_State_Attributes.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        objectid1: Int? = nil,
        lanEwags: String? = nil,
        lanEwgen: String? = nil,
        lanEwbez: String? = nil,
        lanEwewz: Int? = nil,
        objectid: Int? = nil,
        fallzahl: Int? = nil,
        aktualisierung: Int? = nil,
        agsTxt: String? = nil,
        globalid: String? = nil,
        faelle100000_ew: Double? = nil,
        shapeArea: Double? = nil,
        shapeLength: Double? = nil,
        death: Int? = nil,
        cases7BlPer100K: Double? = nil
    ) -> RKI_State_Attributes {
        return RKI_State_Attributes(
            objectid1: objectid1 ?? self.objectid1,
            lanEwags: lanEwags ?? self.lanEwags,
            lanEwgen: lanEwgen ?? self.lanEwgen,
            lanEwbez: lanEwbez ?? self.lanEwbez,
            lanEwewz: lanEwewz ?? self.lanEwewz,
            objectid: objectid ?? self.objectid,
            fallzahl: fallzahl ?? self.fallzahl,
            aktualisierung: aktualisierung ?? self.aktualisierung,
            agsTxt: agsTxt ?? self.agsTxt,
            globalid: globalid ?? self.globalid,
            faelle100000_ew: faelle100000_ew ?? self.faelle100000_ew,
            shapeArea: shapeArea ?? self.shapeArea,
            shapeLength: shapeLength ?? self.shapeLength,
            death: death ?? self.death,
            cases7BlPer100K: cases7BlPer100K ?? self.cases7BlPer100K
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_State_Field
struct RKI_State_Field: Codable {
    var name: String
    var type: String
    var alias: String
    var sqlType: RKI_State_SQLType
    var domain: JSONNull?
    var defaultValue: JSONNull?
    var length: Int?

    enum CodingKeys: String, CodingKey {
        case name = "name"
        case type = "type"
        case alias = "alias"
        case sqlType = "sqlType"
        case domain = "domain"
        case defaultValue = "defaultValue"
        case length = "length"
    }
}

// MARK: RKI_State_Field convenience initializers and mutators

fileprivate extension RKI_State_Field {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_State_Field.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        name: String? = nil,
        type: String? = nil,
        alias: String? = nil,
        sqlType: RKI_State_SQLType? = nil,
        domain: JSONNull?? = nil,
        defaultValue: JSONNull?? = nil,
        length: Int?? = nil
    ) -> RKI_State_Field {
        return RKI_State_Field(
            name: name ?? self.name,
            type: type ?? self.type,
            alias: alias ?? self.alias,
            sqlType: sqlType ?? self.sqlType,
            domain: domain ?? self.domain,
            defaultValue: defaultValue ?? self.defaultValue,
            length: length ?? self.length
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

enum RKI_State_SQLType: String, Codable {
    case sqlTypeDouble = "sqlTypeDouble"
    case sqlTypeInteger = "sqlTypeInteger"
    case sqlTypeOther = "sqlTypeOther"
}

// MARK: - RKI_State_GeometryProperties
struct RKI_State_GeometryProperties: Codable {
    var shapeAreaFieldName: String
    var shapeLengthFieldName: String
    var units: String

    enum CodingKeys: String, CodingKey {
        case shapeAreaFieldName = "shapeAreaFieldName"
        case shapeLengthFieldName = "shapeLengthFieldName"
        case units = "units"
    }
}

// MARK: RKI_State_GeometryProperties convenience initializers and mutators

fileprivate extension RKI_State_GeometryProperties {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_State_GeometryProperties.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        shapeAreaFieldName: String? = nil,
        shapeLengthFieldName: String? = nil,
        units: String? = nil
    ) -> RKI_State_GeometryProperties {
        return RKI_State_GeometryProperties(
            shapeAreaFieldName: shapeAreaFieldName ?? self.shapeAreaFieldName,
            shapeLengthFieldName: shapeLengthFieldName ?? self.shapeLengthFieldName,
            units: units ?? self.units
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_State_SpatialReference
struct RKI_State_SpatialReference: Codable {
    var wkid: Int
    var latestWkid: Int

    enum CodingKeys: String, CodingKey {
        case wkid = "wkid"
        case latestWkid = "latestWkid"
    }
}

// MARK: RKI_State_SpatialReference convenience initializers and mutators

fileprivate extension RKI_State_SpatialReference {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_State_SpatialReference.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        wkid: Int? = nil,
        latestWkid: Int? = nil
    ) -> RKI_State_SpatialReference {
        return RKI_State_SpatialReference(
            wkid: wkid ?? self.wkid,
            latestWkid: latestWkid ?? self.latestWkid
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_State_UniqueidField
struct RKI_State_UniqueidField: Codable {
    var name: String
    var isSystemMaintained: Bool

    enum CodingKeys: String, CodingKey {
        case name = "name"
        case isSystemMaintained = "isSystemMaintained"
    }
}

// MARK: RKI_State_UniqueidField convenience initializers and mutators

fileprivate extension RKI_State_UniqueidField {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_State_UniqueidField.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        name: String? = nil,
        isSystemMaintained: Bool? = nil
    ) -> RKI_State_UniqueidField {
        return RKI_State_UniqueidField(
            name: name ?? self.name,
            isSystemMaintained: isSystemMaintained ?? self.isSystemMaintained
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

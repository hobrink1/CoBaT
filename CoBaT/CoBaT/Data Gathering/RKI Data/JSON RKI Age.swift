//
//  JSON RKI Age.swift
//  CoBaT
//
//  Created by Hartwig Hopfenzitz on 31.12.20.
//

// file generated by website "https://app.quicktype.io" which creates
// full JSON decode data structures and helper methodes out of JSON example data
// very usefull!!

// created file has been adjusted for internal use

// This file was generated from JSON Schema using quicktype, do not modify it directly.
// To parse the JSON, add this file to your project and do:
//
//   let rKIAgeRKIAgeDeviation = try RKI_Age_RKIAgeDeviation(json)

import Foundation

// MARK: - RKI_Age_RKIAgeDeviation
struct RKI_Age_RKIAgeDeviation: Codable {
    var objectidFieldName: String
    var uniqueidField: RKI_Age_UniqueidField
    var globalidFieldName: String
    var fields: [RKI_Age_Field]
    var exceededTransferLimit: Bool
    var features: [RKI_Age_Feature]

    enum CodingKeys: String, CodingKey {
        case objectidFieldName = "objectIdFieldName"
        case uniqueidField = "uniqueIdField"
        case globalidFieldName = "globalIdFieldName"
        case fields = "fields"
        case exceededTransferLimit = "exceededTransferLimit"
        case features = "features"
    }
}

// MARK: RKI_Age_RKIAgeDeviation convenience initializers and mutators

extension RKI_Age_RKIAgeDeviation {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_Age_RKIAgeDeviation.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        objectidFieldName: String? = nil,
        uniqueidField: RKI_Age_UniqueidField? = nil,
        globalidFieldName: String? = nil,
        fields: [RKI_Age_Field]? = nil,
        exceededTransferLimit: Bool? = nil,
        features: [RKI_Age_Feature]? = nil
    ) -> RKI_Age_RKIAgeDeviation {
        return RKI_Age_RKIAgeDeviation(
            objectidFieldName: objectidFieldName ?? self.objectidFieldName,
            uniqueidField: uniqueidField ?? self.uniqueidField,
            globalidFieldName: globalidFieldName ?? self.globalidFieldName,
            fields: fields ?? self.fields,
            exceededTransferLimit: exceededTransferLimit ?? self.exceededTransferLimit,
            features: features ?? self.features
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_Age_Feature
struct RKI_Age_Feature: Codable {
    var attributes: RKI_Age_Attributes

    enum CodingKeys: String, CodingKey {
        case attributes = "attributes"
    }
}

// MARK: RKI_Age_Feature convenience initializers and mutators

extension RKI_Age_Feature {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_Age_Feature.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        attributes: RKI_Age_Attributes? = nil
    ) -> RKI_Age_Feature {
        return RKI_Age_Feature(
            attributes: attributes ?? self.attributes
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_Age_Attributes
struct RKI_Age_Attributes: Codable {
    var idBundesland: Int
    var bundesland: String
    var landkreis: String
    var altersgruppe: RKI_Age_Altersgruppe
    var geschlecht: RKI_Age_Geschlecht
    var anzahlFall: Int
    var anzahlTodesfall: Int
    var objectid: Int
    var meldedatum: Int
    var idLandkreis: String
    var datenstand: String
    var neuerFall: Int
    var neuerTodesfall: Int
    var refdatum: Int
    var neuGenesen: Int
    var anzahlGenesen: Int
    var istErkrankungsbeginn: Int
    var altersgruppe2: RKI_Age_Altersgruppe2

    enum CodingKeys: String, CodingKey {
        case idBundesland = "IdBundesland"
        case bundesland = "Bundesland"
        case landkreis = "Landkreis"
        case altersgruppe = "Altersgruppe"
        case geschlecht = "Geschlecht"
        case anzahlFall = "AnzahlFall"
        case anzahlTodesfall = "AnzahlTodesfall"
        case objectid = "ObjectId"
        case meldedatum = "Meldedatum"
        case idLandkreis = "IdLandkreis"
        case datenstand = "Datenstand"
        case neuerFall = "NeuerFall"
        case neuerTodesfall = "NeuerTodesfall"
        case refdatum = "Refdatum"
        case neuGenesen = "NeuGenesen"
        case anzahlGenesen = "AnzahlGenesen"
        case istErkrankungsbeginn = "IstErkrankungsbeginn"
        case altersgruppe2 = "Altersgruppe2"
    }
}

// MARK: RKI_Age_Attributes convenience initializers and mutators

extension RKI_Age_Attributes {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_Age_Attributes.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        idBundesland: Int? = nil,
        bundesland: String? = nil,
        landkreis: String? = nil,
        altersgruppe: RKI_Age_Altersgruppe? = nil,
        geschlecht: RKI_Age_Geschlecht? = nil,
        anzahlFall: Int? = nil,
        anzahlTodesfall: Int? = nil,
        objectid: Int? = nil,
        meldedatum: Int? = nil,
        idLandkreis: String? = nil,
        datenstand: String? = nil,
        neuerFall: Int? = nil,
        neuerTodesfall: Int? = nil,
        refdatum: Int? = nil,
        neuGenesen: Int? = nil,
        anzahlGenesen: Int? = nil,
        istErkrankungsbeginn: Int? = nil,
        altersgruppe2: RKI_Age_Altersgruppe2? = nil
    ) -> RKI_Age_Attributes {
        return RKI_Age_Attributes(
            idBundesland: idBundesland ?? self.idBundesland,
            bundesland: bundesland ?? self.bundesland,
            landkreis: landkreis ?? self.landkreis,
            altersgruppe: altersgruppe ?? self.altersgruppe,
            geschlecht: geschlecht ?? self.geschlecht,
            anzahlFall: anzahlFall ?? self.anzahlFall,
            anzahlTodesfall: anzahlTodesfall ?? self.anzahlTodesfall,
            objectid: objectid ?? self.objectid,
            meldedatum: meldedatum ?? self.meldedatum,
            idLandkreis: idLandkreis ?? self.idLandkreis,
            datenstand: datenstand ?? self.datenstand,
            neuerFall: neuerFall ?? self.neuerFall,
            neuerTodesfall: neuerTodesfall ?? self.neuerTodesfall,
            refdatum: refdatum ?? self.refdatum,
            neuGenesen: neuGenesen ?? self.neuGenesen,
            anzahlGenesen: anzahlGenesen ?? self.anzahlGenesen,
            istErkrankungsbeginn: istErkrankungsbeginn ?? self.istErkrankungsbeginn,
            altersgruppe2: altersgruppe2 ?? self.altersgruppe2
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

enum RKI_Age_Altersgruppe: String, Codable {
    case a00A04 = "A00-A04"
    case a05A14 = "A05-A14"
    case a15A34 = "A15-A34"
    case a35A59 = "A35-A59"
    case a60A79 = "A60-A79"
    case a80 = "A80+"
    case a00 = "unbekannt"
}

enum RKI_Age_Altersgruppe2: String, Codable {
    case nichtÜbermittelt = "Nicht übermittelt"
}

/*
enum RKI_Age_Datenstand: String, Codable {
    case the301220200000Uhr = "30.12.2020, 00:00 Uhr"
}
 */

enum RKI_Age_Geschlecht: String, Codable {
    case m = "M"
    case w = "W"
    case d = "unbekannt"
}

// MARK: - RKI_Age_Field
struct RKI_Age_Field: Codable {
    var name: String
    var type: RKI_Age_Type
    var alias: String
    var sqlType: RKI_Age_SQLType
    var domain: JSONNull?
    var defaultValue: JSONNull?
    var length: Int?

    enum CodingKeys: String, CodingKey {
        case name = "name"
        case type = "type"
        case alias = "alias"
        case sqlType = "sqlType"
        case domain = "domain"
        case defaultValue = "defaultValue"
        case length = "length"
    }
}

// MARK: RKI_Age_Field convenience initializers and mutators

extension RKI_Age_Field {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_Age_Field.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        name: String? = nil,
        type: RKI_Age_Type? = nil,
        alias: String? = nil,
        sqlType: RKI_Age_SQLType? = nil,
        domain: JSONNull?? = nil,
        defaultValue: JSONNull?? = nil,
        length: Int?? = nil
    ) -> RKI_Age_Field {
        return RKI_Age_Field(
            name: name ?? self.name,
            type: type ?? self.type,
            alias: alias ?? self.alias,
            sqlType: sqlType ?? self.sqlType,
            domain: domain ?? self.domain,
            defaultValue: defaultValue ?? self.defaultValue,
            length: length ?? self.length
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

enum RKI_Age_SQLType: String, Codable {
    case sqlTypeInteger = "sqlTypeInteger"
    case sqlTypeOther = "sqlTypeOther"
    case sqlTypenVarchar = "sqlTypeNVarchar"
}

enum RKI_Age_Type: String, Codable {
    case esriFieldTypeDate = "esriFieldTypeDate"
    case esriFieldTypeInteger = "esriFieldTypeInteger"
    case esriFieldTypeString = "esriFieldTypeString"
    case esriFieldTypeoid = "esriFieldTypeOID"
}

// MARK: - RKI_Age_UniqueidField
struct RKI_Age_UniqueidField: Codable {
    var name: String
    var isSystemMaintained: Bool

    enum CodingKeys: String, CodingKey {
        case name = "name"
        case isSystemMaintained = "isSystemMaintained"
    }
}

// MARK: RKI_Age_UniqueidField convenience initializers and mutators

extension RKI_Age_UniqueidField {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_Age_UniqueidField.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        name: String? = nil,
        isSystemMaintained: Bool? = nil
    ) -> RKI_Age_UniqueidField {
        return RKI_Age_UniqueidField(
            name: name ?? self.name,
            isSystemMaintained: isSystemMaintained ?? self.isSystemMaintained
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

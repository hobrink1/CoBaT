//
//  JSON RKI CountyShape.swift
//  CoBaT
//
//  Created by Hartwig Hopfenzitz on 18.03.21.
//


// file generated by website "https://app.quicktype.io" which creates
// full JSON decode data structures and helper methodes out of JSON example data
// very usefull!!

// created file has been adjusted for internal use

// This file was generated from JSON Schema using quicktype, do not modify it directly.
// To parse the JSON, add this file to your project and do:
//
//   let rKICSCountyShapeJSON = try RKI_CS_CountyShapeJSON(json)

import Foundation

// MARK: - RKI_CS_CountyShapeJSON
struct RKI_CS_CountyShapeJSON: Codable {
    var objectIdFieldName: String
    var uniqueIdField: RKI_CS_UniqueIdField
    var globalIdFieldName: String
    var geometryProperties: RKI_CS_GeometryProperties
    var geometryType: String
    var spatialReference: RKI_CS_SpatialReference
    var fields: [RKI_CS_Field]
    var features: [RKI_CS_Feature]

    enum CodingKeys: String, CodingKey {
        case objectIdFieldName = "objectIdFieldName"
        case uniqueIdField = "uniqueIdField"
        case globalIdFieldName = "globalIdFieldName"
        case geometryProperties = "geometryProperties"
        case geometryType = "geometryType"
        case spatialReference = "spatialReference"
        case fields = "fields"
        case features = "features"
    }
}

// MARK: RKI_CS_CountyShapeJSON convenience initializers and mutators

extension RKI_CS_CountyShapeJSON {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_CS_CountyShapeJSON.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        objectIdFieldName: String? = nil,
        uniqueIdField: RKI_CS_UniqueIdField? = nil,
        globalIdFieldName: String? = nil,
        geometryProperties: RKI_CS_GeometryProperties? = nil,
        geometryType: String? = nil,
        spatialReference: RKI_CS_SpatialReference? = nil,
        fields: [RKI_CS_Field]? = nil,
        features: [RKI_CS_Feature]? = nil
    ) -> RKI_CS_CountyShapeJSON {
        return RKI_CS_CountyShapeJSON(
            objectIdFieldName: objectIdFieldName ?? self.objectIdFieldName,
            uniqueIdField: uniqueIdField ?? self.uniqueIdField,
            globalIdFieldName: globalIdFieldName ?? self.globalIdFieldName,
            geometryProperties: geometryProperties ?? self.geometryProperties,
            geometryType: geometryType ?? self.geometryType,
            spatialReference: spatialReference ?? self.spatialReference,
            fields: fields ?? self.fields,
            features: features ?? self.features
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_CS_Feature
struct RKI_CS_Feature: Codable {
    var attributes: RKI_CS_Attributes
    var geometry: RKI_CS_Geometry

    enum CodingKeys: String, CodingKey {
        case attributes = "attributes"
        case geometry = "geometry"
    }
}

// MARK: RKI_CS_Feature convenience initializers and mutators

extension RKI_CS_Feature {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_CS_Feature.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        attributes: RKI_CS_Attributes? = nil,
        geometry: RKI_CS_Geometry? = nil
    ) -> RKI_CS_Feature {
        return RKI_CS_Feature(
            attributes: attributes ?? self.attributes,
            geometry: geometry ?? self.geometry
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_CS_Attributes
struct RKI_CS_Attributes: Codable {
    var objectid: Int
    var shapeArea: Double
    var shapeLength: Double
    var gen: String

    enum CodingKeys: String, CodingKey {
        case objectid = "OBJECTID"
        case shapeArea = "Shape__Area"
        case shapeLength = "Shape__Length"
        case gen = "GEN"
    }
}

// MARK: RKI_CS_Attributes convenience initializers and mutators

extension RKI_CS_Attributes {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_CS_Attributes.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        objectid: Int? = nil,
        shapeArea: Double? = nil,
        shapeLength: Double? = nil,
        gen: String? = nil
    ) -> RKI_CS_Attributes {
        return RKI_CS_Attributes(
            objectid: objectid ?? self.objectid,
            shapeArea: shapeArea ?? self.shapeArea,
            shapeLength: shapeLength ?? self.shapeLength,
            gen: gen ?? self.gen
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_CS_Geometry
struct RKI_CS_Geometry: Codable {
    var rings: [[[Double]]]

    enum CodingKeys: String, CodingKey {
        case rings = "rings"
    }
}

// MARK: RKI_CS_Geometry convenience initializers and mutators

extension RKI_CS_Geometry {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_CS_Geometry.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        rings: [[[Double]]]? = nil
    ) -> RKI_CS_Geometry {
        return RKI_CS_Geometry(
            rings: rings ?? self.rings
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_CS_Field
struct RKI_CS_Field: Codable {
    var name: String
    var type: String
    var alias: String
    var sqlType: String
    var domain: JSONNull?
    var defaultValue: JSONNull?
    var length: Int?

    enum CodingKeys: String, CodingKey {
        case name = "name"
        case type = "type"
        case alias = "alias"
        case sqlType = "sqlType"
        case domain = "domain"
        case defaultValue = "defaultValue"
        case length = "length"
    }
}

// MARK: RKI_CS_Field convenience initializers and mutators

extension RKI_CS_Field {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_CS_Field.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        name: String? = nil,
        type: String? = nil,
        alias: String? = nil,
        sqlType: String? = nil,
        domain: JSONNull?? = nil,
        defaultValue: JSONNull?? = nil,
        length: Int?? = nil
    ) -> RKI_CS_Field {
        return RKI_CS_Field(
            name: name ?? self.name,
            type: type ?? self.type,
            alias: alias ?? self.alias,
            sqlType: sqlType ?? self.sqlType,
            domain: domain ?? self.domain,
            defaultValue: defaultValue ?? self.defaultValue,
            length: length ?? self.length
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_CS_GeometryProperties
struct RKI_CS_GeometryProperties: Codable {
    var shapeAreaFieldName: String
    var shapeLengthFieldName: String
    var units: String

    enum CodingKeys: String, CodingKey {
        case shapeAreaFieldName = "shapeAreaFieldName"
        case shapeLengthFieldName = "shapeLengthFieldName"
        case units = "units"
    }
}

// MARK: RKI_CS_GeometryProperties convenience initializers and mutators

extension RKI_CS_GeometryProperties {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_CS_GeometryProperties.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        shapeAreaFieldName: String? = nil,
        shapeLengthFieldName: String? = nil,
        units: String? = nil
    ) -> RKI_CS_GeometryProperties {
        return RKI_CS_GeometryProperties(
            shapeAreaFieldName: shapeAreaFieldName ?? self.shapeAreaFieldName,
            shapeLengthFieldName: shapeLengthFieldName ?? self.shapeLengthFieldName,
            units: units ?? self.units
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_CS_SpatialReference
struct RKI_CS_SpatialReference: Codable {
    var wkid: Int
    var latestWkid: Int

    enum CodingKeys: String, CodingKey {
        case wkid = "wkid"
        case latestWkid = "latestWkid"
    }
}

// MARK: RKI_CS_SpatialReference convenience initializers and mutators

extension RKI_CS_SpatialReference {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_CS_SpatialReference.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        wkid: Int? = nil,
        latestWkid: Int? = nil
    ) -> RKI_CS_SpatialReference {
        return RKI_CS_SpatialReference(
            wkid: wkid ?? self.wkid,
            latestWkid: latestWkid ?? self.latestWkid
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - RKI_CS_UniqueIdField
struct RKI_CS_UniqueIdField: Codable {
    var name: String
    var isSystemMaintained: Bool

    enum CodingKeys: String, CodingKey {
        case name = "name"
        case isSystemMaintained = "isSystemMaintained"
    }
}

// MARK: RKI_CS_UniqueIdField convenience initializers and mutators

extension RKI_CS_UniqueIdField {
    init(data: Data) throws {
        self = try newJSONDecoder().decode(RKI_CS_UniqueIdField.self, from: data)
    }

    init(_ json: String, using encoding: String.Encoding = .utf8) throws {
        guard let data = json.data(using: encoding) else {
            throw NSError(domain: "JSONDecoding", code: 0, userInfo: nil)
        }
        try self.init(data: data)
    }

    init(fromURL url: URL) throws {
        try self.init(data: try Data(contentsOf: url))
    }

    func with(
        name: String? = nil,
        isSystemMaintained: Bool? = nil
    ) -> RKI_CS_UniqueIdField {
        return RKI_CS_UniqueIdField(
            name: name ?? self.name,
            isSystemMaintained: isSystemMaintained ?? self.isSystemMaintained
        )
    }

    func jsonData() throws -> Data {
        return try newJSONEncoder().encode(self)
    }

    func jsonString(encoding: String.Encoding = .utf8) throws -> String? {
        return String(data: try self.jsonData(), encoding: encoding)
    }
}

// MARK: - Helper functions for creating encoders and decoders
//
//func newJSONDecoder() -> JSONDecoder {
//    let decoder = JSONDecoder()
//    if #available(iOS 10.0, OSX 10.12, tvOS 10.0, watchOS 3.0, *) {
//        decoder.dateDecodingStrategy = .iso8601
//    }
//    return decoder
//}
//
//func newJSONEncoder() -> JSONEncoder {
//    let encoder = JSONEncoder()
//    if #available(iOS 10.0, OSX 10.12, tvOS 10.0, watchOS 3.0, *) {
//        encoder.dateEncodingStrategy = .iso8601
//    }
//    return encoder
//}
//
//// MARK: - Encode/decode helpers
//
//class JSONNull: Codable, Hashable {
//
//    public static func == (lhs: JSONNull, rhs: JSONNull) -> Bool {
//        return true
//    }
//
//    public var hashValue: Int {
//        return 0
//    }
//
//    public func hash(into hasher: inout Hasher) {
//        // No-op
//    }
//
//    public init() {}
//
//    public required init(from decoder: Decoder) throws {
//        let container = try decoder.singleValueContainer()
//        if !container.decodeNil() {
//            throw DecodingError.typeMismatch(JSONNull.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for JSONNull"))
//        }
//    }
//
//    public func encode(to encoder: Encoder) throws {
//        var container = encoder.singleValueContainer()
//        try container.encodeNil()
//    }
//}
